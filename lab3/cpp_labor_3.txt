FEJLETT PROGRAMOZÁSI TECHNIKÁK (C++)
3. GYAKORLAT
________________________________________________________________________________

Cél:
● Egyszeresen láncolt lista készítése
○ Konstruktor,
○ Destruktor,
○ Dinamikus helyfoglalás,
○ Beágyazott típusok.

1. feladat
Adott a következő egyszeresen láncolt lista fejállomány (List.h). Ezt az állományt nem szabad
módosítani!
● Implementálja a fejállományban deklarált függvényeket a List.cpp állományban.
● Tesztelje az implementált lista minden egyes függvényét egy main.cpp állományban.
Használja minél gyakrabban az auto típust!
#ifndef LIST_H
#define LIST_H
class List {
public:
/* creates an empty list */
List();
/* destroys this list */
~List();
/* returns true if d is in the list - complexity: O(n) */
bool exists(int d) const;
/* returns the size of the list - complexity: O(1) */
int size() const;
/* returns true if the list is empty - complexity: O(1) */
bool empty() const;
/* inserts d into this list as the first element - complexity: O(1) */
void insertFirst(int d);
/* removes the first element of the list - complexity: O(1) */
/* throws an exception in case of empty list*/
int removeFirst();
/* removes the first element less than/equal to/greater than d,
depending on the value of df. Does nothing if there is no value
to remove. The enum values are accessed with List::DeleteFlag::LESS,
..., outside the class */
enum class DeleteFlag {
LESS, EQUAL, GREATER
};
void remove(int d, DeleteFlag df = DeleteFlag::EQUAL);
/* prints the contents of this list */
void print() const;
/* forbid copying of lists */

FEJLETT PROGRAMOZÁSI TECHNIKÁK (C++)
3. GYAKORLAT
________________________________________________________________________________
List(const List&) = delete;
List& operator=(const List&) = delete;
private:
/* number of nodes in the list */
int nodeCounter{0};
/* a list node */
struct Node {
int value; // the node value
Node* next; // pointer to the next node, nullptr in the last node
Node(int v, Node* n) : value(v), next(n) {
}
};
Node* first; // pointer to the first node
};
#endif /* LIST_H */

Forrás: http://fileadmin.cs.lth.se/cs/education/eda031/labs/cpplabs.pdf

2. feladat
Felhasználva a lista adatstruktúrát (List osztály), készítsen egy verem adatstruktúrát (Stack osztály),
amely a következő műveletekkel rendelkezik:
void push(int e);
int pop();
bool isEmpty() const;

●
●
●
●
●
●

A Stack osztály tartalmazási kapcsolatban van a List osztállyal.
A pop művelet váltson ki kivételt üres verem esetében.
Tesztelje a Stack osztályt!
Milyen konstruktorok hívódnak amikor létrehoz egy Stack példányt?
Milyen destruktorok hívódnak amikor megsemmisül a Stack példány?
Ellenőrizze az előző kérdésekre adott válaszát úgy, hogy használjon kiíratásokat a
konstruktor, illetve a destruktorban. Így pontosan tudja követni ezek hívását.

